{"version":3,"sources":["logo.svg","store/notificationActions.ts","NotificationListener.tsx","About.tsx","Home.tsx","Users.tsx","App.tsx","serviceWorker.ts","store/rootReducer.ts","store/notificationReducer.ts","store/index.ts","index.tsx"],"names":["module","exports","showNotification","notification","dispatch","type","removeNotification","id","NotificationListener","useDispatch","notifications","useSelector","state","length","toast","message","processNotificationQueue","About","onClick","Date","now","Home","Users","App","className","src","logo","alt","to","path","Boolean","window","location","hostname","match","combineReducers","action","Object","assign","filter","n","INITIAL_STATE","createLogger","ReactDOM","render","StrictMode","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,gOCI9BC,G,MAAmB,SAACC,GAAD,OAAoC,SAClEC,GAEAA,EAAS,CACPC,KAL6B,oBAM7BF,oBAKSG,EAAqB,SAACC,GAAD,OAAyB,SACzDH,GAEAA,EAAS,CACPC,KAL+B,sBAM/BE,SCSWC,EApB4B,WACzC,IAAMJ,EAAWK,cAITC,EAHkBC,aACxB,SAACC,GAAD,OAAwBA,EAAMT,gBAExBO,cAYR,OAViC,WAC/B,GAAIA,EAAcG,OAAQ,CAAC,IAAD,gBACGH,GADH,IACxB,2BAA0C,CAAC,IAAhCP,EAA+B,QACxCW,YAAMX,EAAaY,SACnBX,EAASE,EAAmBH,EAAaI,MAHnB,gCAQ5BS,GACO,kBAAC,IAAD,OCFMC,EAnBa,WAC1B,IAAMb,EAAWK,cAUjB,OACE,6BACE,gDACA,4BAAQS,QAXQ,WAClBd,EACEF,EAAiB,CACfa,QAAS,kDACTR,GAAIY,KAAKC,WAOX,eCISC,EAlBY,WACzB,IAAMjB,EAAWK,cASjB,OACE,6BACE,+CACA,4BAAQS,QAXQ,WAClBd,EACEF,EAAiB,CACfa,QAAS,iDACTR,GAAIY,KAAKC,WAOX,eCMSE,EAlBa,WAC1B,IAAMlB,EAAWK,cASjB,OACE,6BACE,gDACA,4BAAQS,QAXQ,WAClBd,EACEF,EAAiB,CACfa,QAAS,kDACTR,GAAIY,KAAKC,WAOX,eCiCSG,MAzCf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,WAAWC,IAAKC,IAAMC,IAAI,YACzC,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,yBAAKH,UAAU,wBACb,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMI,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YC9BMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCfSC,cAAgB,CAC7BhC,aCQa,WAKF,IAJXS,EAIU,uDAJK,CACbF,cAAe,IAEjB0B,EACU,uCACV,OAAQA,EAAO/B,MACb,IRhB6B,oBQiB3B,OAAOgC,OAAOC,OAAO,GAAI1B,EAAO,CAC9BF,cAAc,GAAD,mBAAME,EAAMF,eAAZ,CAA2B0B,EAAOjC,iBAEnD,IRV+B,sBQW7B,OAAOkC,OAAOC,OAAO,GAAI1B,EAAO,CAC9BF,cAAc,YACTE,EAAMF,cAAc6B,QAAO,SAACC,GAAD,OAAOA,EAAEjC,KAAO6B,EAAO7B,SAG3D,QACE,OAAOK,MCnBA6B,EAAgB,CAC3BtC,aAAc,CACZO,cAAe,KAIMgC,yBCPzBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MDOC,WAA8D,IAAtCC,EAAqC,uDAAtBN,EACpD,OAAOO,YACLC,EACAF,EAEIG,YAAgBC,MCZHC,IACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SJ2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM/C,c","file":"static/js/main.b8b8de1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Dispatch } from \"redux\";\nimport { NotificationType } from \"./notificationReducer\";\n\nexport const SHOW_NOTIFICATION = \"SHOW_NOTIFICATION\";\nexport const showNotification = (notification: NotificationType) => (\n  dispatch: Dispatch\n): void => {\n  dispatch({\n    type: SHOW_NOTIFICATION,\n    notification,\n  });\n};\n\nexport const REMOVE_NOTIFICATION = \"REMOVE_NOTIFICATION\";\nexport const removeNotification = (id: string | number) => (\n  dispatch: Dispatch\n): void => {\n  dispatch({\n    type: REMOVE_NOTIFICATION,\n    id,\n  });\n};\n","import React, { ReactElement } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { GlobalState } from \"./store\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { removeNotification } from \"./store/notificationActions\";\n\nconst NotificationListener: React.FC<{}> = (): ReactElement => {\n  const dispatch = useDispatch();\n  const notificationState = useSelector(\n    (state: GlobalState) => state.notification\n  );\n  const { notifications } = notificationState;\n\n  const processNotificationQueue = () => {\n    if (notifications.length) {\n      for (const notification of notifications) {\n        toast(notification.message);\n        dispatch(removeNotification(notification.id));\n      }\n    }\n  };\n\n  processNotificationQueue();\n  return <ToastContainer />;\n};\n\nexport default NotificationListener;\n","import React, { ReactElement } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { showNotification } from \"./store/notificationActions\";\n\nconst About: React.FC<{}> = (): ReactElement => {\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    dispatch(\n      showNotification({\n        message: \"This is a test notification for the ABOUT page!\",\n        id: Date.now(),\n      })\n    );\n  };\n  return (\n    <div>\n      <h1>HELLO ABOUT PAGE</h1>\n      <button onClick={handleClick}>Click me!</button>\n    </div>\n  );\n};\n\nexport default About;\n","import React, { ReactElement } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { showNotification } from \"./store/notificationActions\";\n\nconst Home: React.FC<{}> = (): ReactElement => {\n  const dispatch = useDispatch();\n  const handleClick = () => {\n    dispatch(\n      showNotification({\n        message: \"This is a test notification for the HOME page!\",\n        id: Date.now(),\n      })\n    );\n  };\n  return (\n    <div>\n      <h1>HELLO HOME PAGE</h1>\n      <button onClick={handleClick}>Click me!</button>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { ReactElement } from \"react\";\n\nimport { useDispatch } from \"react-redux\";\nimport { showNotification } from \"./store/notificationActions\";\n\nconst Users: React.FC<{}> = (): ReactElement => {\n  const dispatch = useDispatch();\n  const handleClick = () => {\n    dispatch(\n      showNotification({\n        message: \"This is a test notification for the USERS page!\",\n        id: Date.now(),\n      })\n    );\n  };\n  return (\n    <div>\n      <h1>HELLO USERS PAGE</h1>\n      <button onClick={handleClick}>Click me!</button>\n    </div>\n  );\n};\n\nexport default Users;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport NotificationListener from \"./NotificationListener\";\nimport About from \"./About\";\nimport Home from \"./Home\";\nimport Users from \"./Users\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img className=\"App-logo\" src={logo} alt=\"poopies\" />\n      <NotificationListener />\n\n      <Router>\n        <div className=\"App-router-container\">\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/about\">About</Link>\n              </li>\n              <li>\n                <Link to=\"/users\">Users</Link>\n              </li>\n            </ul>\n          </nav>\n\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/users\">\n              <Users />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport notification from \"./notificationReducer\";\n\nexport default combineReducers({\n  notification,\n});\n","import { SHOW_NOTIFICATION, REMOVE_NOTIFICATION } from \"./notificationActions\";\nimport { AnyAction } from \"redux\";\n\nexport type NotificationType = {\n  message: string;\n  id: string | number;\n};\n\nexport type State = {\n  notifications: NotificationType[];\n};\n\nexport default (\n  state: State = {\n    notifications: [],\n  },\n  action: AnyAction\n): State => {\n  switch (action.type) {\n    case SHOW_NOTIFICATION:\n      return Object.assign({}, state, {\n        notifications: [...state.notifications, action.notification],\n      });\n    case REMOVE_NOTIFICATION:\n      return Object.assign({}, state, {\n        notifications: [\n          ...state.notifications.filter((n) => n.id !== action.id),\n        ],\n      });\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware, Store } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"./rootReducer\";\nimport { State as NotificationState } from \"./notificationReducer\";\n\nexport type GlobalState = {\n  notification: NotificationState;\n};\n\nexport const INITIAL_STATE = {\n  notification: {\n    notifications: [],\n  },\n};\n\nconst loggerMiddleware = createLogger();\n\nexport default function configureStore(initialState = INITIAL_STATE): Store {\n  return createStore(\n    rootReducer,\n    initialState,\n    process.env.NODE_ENV === \"production\"\n      ? applyMiddleware(thunk)\n      : applyMiddleware(thunk, loggerMiddleware)\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}